--- a/net/minecraft/entity/projectile/PersistentProjectileEntity.java
+++ b/net/minecraft/entity/projectile/PersistentProjectileEntity.java
@@ -46,20 +46,28 @@
 
 public abstract class PersistentProjectileEntity extends ProjectileEntity {
 
+    // Loom start
+    @Override
+    public org.loomdev.loom.entity.projectile.PersistentProjectileImpl getLoomEntity() {
+        return (org.loomdev.loom.entity.projectile.PersistentProjectileImpl) super.getLoomEntity();
+    }
+    // Loom end
+
     private static final TrackedData<Byte> PROJECTILE_FLAGS = DataTracker.registerData(PersistentProjectileEntity.class, TrackedDataHandlerRegistry.BYTE);
     private static final TrackedData<Byte> PIERCE_LEVEL = DataTracker.registerData(PersistentProjectileEntity.class, TrackedDataHandlerRegistry.BYTE);
     @Nullable
     private BlockState inBlockState;
-    protected boolean inGround;
+    public boolean inGround; // Loom :: public accessor
     protected int inGroundTime;
     public PersistentProjectileEntity.PickupPermission pickupType;
     public int shake;
     private int life;
     private double damage;
-    private int punch;
-    private SoundEvent sound;
+    public int punch; // Loom :: public accessor
+    public SoundEvent sound; // Loom :: public accessor
     private IntOpenHashSet piercedEntities;
     private List<Entity> piercingKilledEntities;
+    public float dragInWater = 0.6F; // Loom :: added to make configurable.
 
     protected PersistentProjectileEntity(EntityType<? extends PersistentProjectileEntity> entitytype, World world) {
         super(entitytype, world);
@@ -578,7 +586,7 @@
     }
 
     protected float getDragInWater() {
-        return 0.6F;
+        return dragInWater; // Loom :: use added property
     }
 
     public void setNoClip(boolean flag) {
