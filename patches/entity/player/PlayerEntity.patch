--- a/net/minecraft/entity/player/PlayerEntity.java
+++ b/net/minecraft/entity/player/PlayerEntity.java
@@ -109,7 +109,7 @@
 public abstract class PlayerEntity extends LivingEntity {
 
     public static final EntityDimensions STANDING_DIMENSIONS = EntityDimensions.changing(0.6F, 1.8F);
-    private static final Map<EntityPose, EntityDimensions> POSE_DIMENSIONS = ImmutableMap.builder().put(EntityPose.STANDING, PlayerEntity.STANDING_DIMENSIONS).put(EntityPose.SLEEPING, PlayerEntity.SLEEPING_DIMENSIONS).put(EntityPose.FALL_FLYING, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SWIMMING, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SPIN_ATTACK, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.CROUCHING, EntityDimensions.changing(0.6F, 1.5F)).put(EntityPose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
+    private static final Map<EntityPose, EntityDimensions> POSE_DIMENSIONS = ImmutableMap.<EntityPose, EntityDimensions>builder().put(EntityPose.STANDING, PlayerEntity.STANDING_DIMENSIONS).put(EntityPose.SLEEPING, PlayerEntity.SLEEPING_DIMENSIONS).put(EntityPose.FALL_FLYING, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SWIMMING, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SPIN_ATTACK, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.CROUCHING, EntityDimensions.changing(0.6F, 1.5F)).put(EntityPose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build(); // Loom :: decompile error
     private static final TrackedData<Float> ABSORPTION_AMOUNT = DataTracker.registerData(PlayerEntity.class, TrackedDataHandlerRegistry.FLOAT);
     private static final TrackedData<Integer> SCORE = DataTracker.registerData(PlayerEntity.class, TrackedDataHandlerRegistry.INTEGER);
     protected static final TrackedData<Byte> PLAYER_MODEL_PARTS = DataTracker.registerData(PlayerEntity.class, TrackedDataHandlerRegistry.BYTE);
@@ -1315,7 +1315,8 @@
         if (this.abilities.flying) {
             this.setSwimming(false);
         } else {
-            super.updateSwimming();
+            this.setSwimming(false);
+            //super.updateSwimming();
         }
 
     }
@@ -1421,7 +1422,15 @@
             ItemStack itemstack = this.getEquippedStack(EquipmentSlot.CHEST);
 
             if (itemstack.getItem() == Items.ELYTRA && ElytraItem.isUsable(itemstack)) {
+                // Loom start :: fire PlayerEnteredFlightEvent
+                org.loomdev.loom.event.LoomEventDispatcher.onPlayerEnteredFlight(this).thenAccept(event -> {
+                    if (event.isCancelled()) {
+                        this.stopFallFlying();
+                    } else {
                 this.startFallFlying();
+                    }
+                });
+                // Loom end
                 return true;
             }
         }
@@ -1611,7 +1620,7 @@
     }
 
     public Iterable<ItemStack> getItemsHand() {
-        return Lists.newArrayList((Object[])(this.getMainHandStack(), this.getOffHandStack()));
+        return Lists.newArrayList(this.getMainHandStack(), this.getOffHandStack()); // Loom :: decompile error
     }
 
     public Iterable<ItemStack> getArmorItems() {
