--- a/net/minecraft/entity/mob/CreeperEntity.java
+++ b/net/minecraft/entity/mob/CreeperEntity.java
@@ -40,14 +40,21 @@
 
 public class CreeperEntity extends HostileEntity {
 
+    // Loom start :: additions
+    public void setCharged(boolean charged) {
+        this.dataTracker.set(CreeperEntity.CHARGED, charged);
+    }
+    // Loom end :: additions
+
     private static final TrackedData<Integer> FUSE_SPEED = DataTracker.registerData(CreeperEntity.class, TrackedDataHandlerRegistry.INTEGER);
     private static final TrackedData<Boolean> CHARGED = DataTracker.registerData(CreeperEntity.class, TrackedDataHandlerRegistry.BOOLEAN);
     private static final TrackedData<Boolean> IGNITED = DataTracker.registerData(CreeperEntity.class, TrackedDataHandlerRegistry.BOOLEAN);
     private int lastFuseTime;
-    private int currentFuseTime;
-    private int fuseTime = 30;
+    public int currentFuseTime; // Loom :: public access
+    public int fuseTime = 30; // Loom :: public access
     private int explosionRadius = 3;
     private int headsDropped;
+    public float explosionPower = -1F; // Loom :: overridable explosion radius
 
     public CreeperEntity(EntityType<? extends CreeperEntity> entitytype, World world) {
         super(entitytype, world);
@@ -209,13 +216,13 @@
         }
     }
 
-    private void explode() {
+    public void explode() { // Loom :: public access
         if (!this.world.isClient) {
             Explosion.DestructionType explosion_destructiontype = this.world.getGameRules().getBoolean(GameRules.DO_MOB_GRIEFING) ? Explosion.DestructionType.DESTROY : Explosion.DestructionType.NONE;
             float f = this.S_() ? 2.0F : 1.0F;
 
             this.dead = true;
-            this.world.createExplosion(this, this.getX(), this.getY(), this.getZ(), (float) this.explosionRadius * f, explosion_destructiontype);
+            this.world.createExplosion(this, this.getX(), this.getY(), this.getZ(), this.explosionPower != -1F ? this.explosionPower : (float) this.explosionRadius * f, explosion_destructiontype); // Loom :: overridable explosion radius
             this.remove();
             this.spawnEffectsCloud();
         }
@@ -251,7 +258,13 @@
     }
 
     public void ignite() {
+        // Loom start :: fire CreeperIgnitedEvent
+        org.loomdev.loom.event.LoomEventDispatcher.onCreeperIgnited(this).thenAccept(event -> {
+            if (!event.isCancelled()) {
         this.dataTracker.set(CreeperEntity.IGNITED, true);
+            }
+        });
+        // Loom end
     }
 
     public boolean shouldDropHead() {
