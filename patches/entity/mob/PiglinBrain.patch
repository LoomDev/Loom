--- a/net/minecraft/entity/mob/PiglinBrain.java
+++ b/net/minecraft/entity/mob/PiglinBrain.java
@@ -161,10 +161,10 @@
 
     protected static void tickActivities(PiglinEntity piglinentity) {
         Brain<PiglinEntity> brain = piglinentity.getBrain();
-        Activity activity = (Activity) brain.getFirstPossibleNonCoreActivity().orElse((Object) null);
+        Activity activity = (Activity) brain.getFirstPossibleNonCoreActivity().orElse(null); // Loom :: decompile error
 
         brain.resetPossibleActivities((List) ImmutableList.of(Activity.ADMIRE_ITEM, Activity.FIGHT, Activity.AVOID, Activity.CELEBRATE, Activity.RIDE, Activity.IDLE));
-        Activity activity1 = (Activity) brain.getFirstPossibleNonCoreActivity().orElse((Object) null);
+        Activity activity1 = (Activity) brain.getFirstPossibleNonCoreActivity().orElse(null); // Loom :: decompile error
 
         if (activity != activity1) {
             method_30091(piglinentity).ifPresent(piglinentity::playSound);
@@ -243,7 +243,7 @@
         return itemstack1;
     }
 
-    protected static void consumeOffHandItem(PiglinEntity piglinentity, boolean flag) {
+    public static void consumeOffHandItem(PiglinEntity piglinentity, boolean flag) { // Loom :: public access
         ItemStack itemstack = piglinentity.getStackInHand(Hand.OFF_HAND);
 
         piglinentity.setStackInHand(Hand.OFF_HAND, ItemStack.EMPTY);
@@ -351,7 +351,7 @@
         }
     }
 
-    protected static boolean isGoldenItem(Item item) {
+    public static boolean isGoldenItem(Item item) { // Loom :: public access
         return item.isIn((Tag) ItemTags.PIGLIN_LOVED);
     }
 
@@ -518,7 +518,7 @@
         return !brain.hasMemoryModule(MemoryModuleType.AVOID_TARGET) ? false : ((LivingEntity) brain.getOptionalMemory(MemoryModuleType.AVOID_TARGET).get()).isInRange(piglinentity, 12.0D);
     }
 
-    protected static boolean haveHuntedHoglinsRecently(PiglinEntity piglinentity) {
+    public static boolean haveHuntedHoglinsRecently(PiglinEntity piglinentity) { // Loom :: public access
         return piglinentity.getBrain().hasMemoryModule(MemoryModuleType.HUNTED_RECENTLY) || getNearbyVisiblePiglins(piglinentity).stream().anyMatch((abstractpiglinentity) -> {
             return abstractpiglinentity.getBrain().hasMemoryModule(MemoryModuleType.HUNTED_RECENTLY);
         });
