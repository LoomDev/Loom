--- a/net/minecraft/entity/Entity.java
+++ b/net/minecraft/entity/Entity.java
@@ -107,6 +107,17 @@
 
 public abstract class Entity implements Nameable, CommandOutput {
 
+    // Loom start :: loom entity getter
+    private org.loomdev.loom.entity.EntityImpl entityImpl;
+
+    public org.loomdev.loom.entity.EntityImpl getLoomEntity() {
+        if (entityImpl == null) {
+            entityImpl = org.loomdev.loom.entity.LoomEntityFactory.getLoomEntity(this);
+        }
+        return entityImpl;
+    }
+    // Loom end :: getLoomEntity
+
     protected static final Logger LOGGER = LogManager.getLogger();
     private static final AtomicInteger MAX_ENTITY_ID = new AtomicInteger();
     private static final List<ItemStack> EMPTY_STACK_LIST = Collections.emptyList();
@@ -160,7 +171,7 @@
     protected Tag<Fluid> field_25599;
     public int timeUntilRegen;
     protected boolean firstUpdate;
-    protected final DataTracker dataTracker;
+    public final DataTracker dataTracker; // Loom :: public accessor
     protected static final TrackedData<Byte> FLAGS = DataTracker.registerData(Entity.class, TrackedDataHandlerRegistry.BYTE);
     private static final TrackedData<Integer> AIR = DataTracker.registerData(Entity.class, TrackedDataHandlerRegistry.INTEGER);
     private static final TrackedData<Optional<Text>> CUSTOM_NAME = DataTracker.registerData(Entity.class, TrackedDataHandlerRegistry.OPTIONAL_TEXT_COMPONENT);
@@ -176,7 +187,7 @@
     private Vec3d trackedPosition;
     public boolean ignoreCameraFrustum;
     public boolean velocityDirty;
-    private int netherPortalCooldown;
+    public int netherPortalCooldown; // Loom :: public accessor
     protected boolean inNetherPortal;
     protected int netherPortalTime;
     protected BlockPos lastNetherPortalPosition;
@@ -190,6 +201,7 @@
     private long pistonMovementTick;
     private EntityDimensions dimensions;
     private float standingEyeHeight;
+    public Optional<Boolean> fireResistantOverride = Optional.empty();
 
     public Entity(EntityType<?> entitytype, World world) {
         this.entityId = Entity.MAX_ENTITY_ID.incrementAndGet();
@@ -439,7 +451,7 @@
         this.setFireTicks(0);
     }
 
-    protected void destroy() {
+    public void destroy() {
         this.remove();
     }
 
@@ -847,7 +859,7 @@
         return 0.0F;
     }
 
-    protected boolean hasWings() {
+    public boolean hasWings() { // Loom :: public acessor
         return false;
     }
 
@@ -892,7 +904,7 @@
     }
 
     public boolean isFireImmune() {
-        return this.getType().isFireImmune();
+        return fireResistantOverride.orElse(this.getType().isFireImmune()); // Loom :: fire resistance override.
     }
 
     public boolean handleFallDamage(float f, float f1) {
@@ -913,13 +925,13 @@
         return this.touchingWater;
     }
 
-    private boolean isBeingRainedOn() {
+    public boolean isBeingRainedOn() { // Loom :: decompile error
         BlockPos blockpos = this.getBlockPos();
 
         return this.world.hasRain(blockpos) || this.world.hasRain(new BlockPos((double) blockpos.getX(), this.getBoundingBox().maxY, (double) blockpos.getZ()));
     }
 
-    private boolean isInsideBubbleColumn() {
+    public boolean isInsideBubbleColumn() { // Loom :: decompile error
         return this.world.getBlockState(this.getBlockPos()).isOf(Blocks.BUBBLE_COLUMN);
     }
 
@@ -1837,7 +1849,13 @@
     }
 
     public void setSwimming(boolean flag) {
+        // Loom start :: fire PlayerToggledSwimmingEvent
+        /*org.loomdev.loom.event.LoomEventDispatcher.onEntityToggledSwimming(this).thenAccept(event -> {
+           if (!event.isCancelled()) {
         this.setFlag(4, flag);
+           }
+        });*/ // TODO re-enable once entity mappings are done
+        // Loom end
     }
 
     public boolean isGlowing() {
@@ -2130,7 +2148,7 @@
                     }
 
                     return AreaHelper.method_30484(serverworld, class_5460, direction_axis, vec3d, this.getDimensions(this.getPose()), this.getVelocity(), this.yaw, this.pitch);
-                }).orElse((Object) null);
+                }).orElse(null); // Loom :: decompile error
             }
         } else {
             BlockPos blockpos1;
@@ -2311,7 +2329,7 @@
         return this.getHorizontalFacing();
     }
 
-    protected HoverEvent getHoverEvent() {
+    public HoverEvent getHoverEvent() { // Loom :: public accessor
         return new HoverEvent(HoverEvent.Action.SHOW_ENTITY, new HoverEvent.EntityContent(this.getType(), this.getUuid(), this.getName()));
     }
 
