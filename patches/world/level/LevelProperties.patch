--- a/net/minecraft/world/level/LevelProperties.java
+++ b/net/minecraft/world/level/LevelProperties.java
@@ -76,8 +76,9 @@
     private final Set<String> serverBrands;
     private boolean modded;
     private final Timer<MinecraftServer> scheduledEvents;
+    private final UUID worldUUID; // Loom :: implement per-world uuids
 
-    private LevelProperties(@Nullable DataFixer datafixer, int i, @Nullable CompoundTag compoundtag, boolean flag, int j, int k, int l, long i1, long j1, int k1, int l1, int i2, boolean flag1, int j2, boolean flag2, boolean flag3, boolean flag4, WorldBorder.Properties worldborder_properties, int k2, int l2, @Nullable UUID uuid, LinkedHashSet<String> linkedhashset, Timer<MinecraftServer> timer, @Nullable CompoundTag compoundtag1, CompoundTag compoundtag2, LevelInfo levelinfo, GeneratorOptions generatoroptions, Lifecycle lifecycle) {
+    private LevelProperties(@Nullable DataFixer datafixer, int i, @Nullable CompoundTag compoundtag, boolean flag, int j, int k, int l, long i1, long j1, int k1, int l1, int i2, boolean flag1, int j2, boolean flag2, boolean flag3, boolean flag4, WorldBorder.Properties worldborder_properties, int k2, int l2, @Nullable UUID uuid, LinkedHashSet<String> linkedhashset, Timer<MinecraftServer> timer, @Nullable CompoundTag compoundtag1, CompoundTag compoundtag2, LevelInfo levelinfo, GeneratorOptions generatoroptions, Lifecycle lifecycle, UUID worldUUID) { // Loom :: implement per-world uuids
         this.dataFixer = datafixer;
         this.modded = flag;
         this.spawnX = j;
@@ -106,10 +107,11 @@
         this.field_25030 = levelinfo;
         this.field_25425 = generatoroptions;
         this.field_25426 = lifecycle;
+        this.worldUUID = worldUUID; // Loom :: implement per-world uuids
     }
 
     public LevelProperties(LevelInfo levelinfo, GeneratorOptions generatoroptions, Lifecycle lifecycle) {
-        this((DataFixer) null, SharedConstants.getGameVersion().getWorldVersion(), (CompoundTag) null, false, 0, 0, 0, 0L, 0L, 19133, 0, 0, false, 0, false, false, false, WorldBorder.DEFAULT_BORDER, 0, 0, (UUID) null, Sets.newLinkedHashSet(), new Timer<>(TimerCallbackSerializer.INSTANCE), (CompoundTag) null, new CompoundTag(), levelinfo.method_28385(), generatoroptions, lifecycle);
+        this((DataFixer) null, SharedConstants.getGameVersion().getWorldVersion(), (CompoundTag) null, false, 0, 0, 0, 0L, 0L, 19133, 0, 0, false, 0, false, false, false, WorldBorder.DEFAULT_BORDER, 0, 0, (UUID) null, Sets.newLinkedHashSet(), new Timer<>(TimerCallbackSerializer.INSTANCE), (CompoundTag) null, new CompoundTag(), levelinfo.method_28385(), generatoroptions, lifecycle, levelinfo.getUUID()); // Loom :: implement per-world uuids
     }
 
     public static LevelProperties method_29029(Dynamic<Tag> dynamic, DataFixer datafixer, int i, @Nullable CompoundTag compoundtag, LevelInfo levelinfo, SaveVersionInfo saveversioninfo, GeneratorOptions generatoroptions, Lifecycle lifecycle) {
@@ -118,9 +120,9 @@
             return (Tag) dynamic.get("DimensionData").get("1").get("DragonFight").orElseEmptyMap().getValue();
         });
 
-        return new LevelProperties(datafixer, i, compoundtag, dynamic.get("WasModded").asBoolean(false), dynamic.get("SpawnX").asInt(0), dynamic.get("SpawnY").asInt(0), dynamic.get("SpawnZ").asInt(0), j, dynamic.get("DayTime").asLong(j), saveversioninfo.getLevelFormatVersion(), dynamic.get("clearWeatherTime").asInt(0), dynamic.get("rainTime").asInt(0), dynamic.get("raining").asBoolean(false), dynamic.get("thunderTime").asInt(0), dynamic.get("thundering").asBoolean(false), dynamic.get("initialized").asBoolean(true), dynamic.get("DifficultyLocked").asBoolean(false), WorldBorder.Properties.fromDynamic(dynamic, WorldBorder.DEFAULT_BORDER), dynamic.get("WanderingTraderSpawnDelay").asInt(0), dynamic.get("WanderingTraderSpawnChance").asInt(0), (UUID) dynamic.get("WanderingTraderId").read(DynamicSerializableUuid.field_25122).result().orElse((Object) null), (LinkedHashSet) dynamic.get("ServerBrands").asStream().flatMap((dynamic1) -> {
+        return new LevelProperties(datafixer, i, compoundtag, dynamic.get("WasModded").asBoolean(false), dynamic.get("SpawnX").asInt(0), dynamic.get("SpawnY").asInt(0), dynamic.get("SpawnZ").asInt(0), j, dynamic.get("DayTime").asLong(j), saveversioninfo.getLevelFormatVersion(), dynamic.get("clearWeatherTime").asInt(0), dynamic.get("rainTime").asInt(0), dynamic.get("raining").asBoolean(false), dynamic.get("thunderTime").asInt(0), dynamic.get("thundering").asBoolean(false), dynamic.get("initialized").asBoolean(true), dynamic.get("DifficultyLocked").asBoolean(false), WorldBorder.Properties.fromDynamic(dynamic, WorldBorder.DEFAULT_BORDER), dynamic.get("WanderingTraderSpawnDelay").asInt(0), dynamic.get("WanderingTraderSpawnChance").asInt(0), (UUID) dynamic.get("WanderingTraderId").read(DynamicSerializableUuid.field_25122).result().orElse(null), (LinkedHashSet) dynamic.get("ServerBrands").asStream().flatMap((dynamic1) -> { // Loom :: decompile error
             return Util.stream(dynamic1.asString().result());
-        }).collect(Collectors.toCollection(Sets::newLinkedHashSet)), new Timer<>(TimerCallbackSerializer.INSTANCE, dynamic.get("ScheduledEvents").asStream()), (CompoundTag) dynamic.get("CustomBossEvents").orElseEmptyMap().getValue(), compoundtag1, levelinfo, generatoroptions, lifecycle);
+        }).collect(Collectors.toCollection(Sets::newLinkedHashSet)), new Timer<>(TimerCallbackSerializer.INSTANCE, dynamic.get("ScheduledEvents").asStream()), (CompoundTag) dynamic.get("CustomBossEvents").orElseEmptyMap().getValue(), compoundtag1, levelinfo, generatoroptions, lifecycle, levelinfo.getUUID()); // Loom :: implement per-world uuids
     }
 
     public CompoundTag cloneWorldTag(RegistryTracker registrytracker, @Nullable CompoundTag compoundtag) {
@@ -154,7 +156,7 @@
 
         logger.getClass();
         dataresult.resultOrPartial(Util.method_29188("WorldGenSettings: ", logger::error)).ifPresent((tag) -> {
-            compoundtag.put("WorldGenSettings", tag);
+            compoundtag.put("WorldGenSettings", (Tag) tag); // Loom :: decompile error
         });
         compoundtag.putInt("GameType", this.field_25030.getGameMode().getId());
         compoundtag.putInt("SpawnX", this.spawnX);
@@ -195,7 +197,7 @@
         if (this.wanderingTraderId != null) {
             compoundtag.putUuid("WanderingTraderId", this.wanderingTraderId);
         }
-
+        compoundtag.putString("UUID", this.worldUUID.toString()); // Loom :: implement per-world uuids
     }
 
     public int getSpawnX() {
@@ -267,6 +269,13 @@
         return this.field_25030.getLevelName();
     }
 
+    // Loom :: implement per-world uuids
+    @Override
+    public UUID getUUID() {
+        return worldUUID;
+    }
+    // Loom end
+
     public int getVersion() {
         return this.version;
     }
