--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -146,12 +146,13 @@
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.loomdev.loom.entity.player.PlayerImpl;
 
 public abstract class MinecraftServer extends ReentrantThreadExecutor<ServerTask> implements SnooperListener, CommandOutput, AutoCloseable {
 
     private static final Logger LOGGER = LogManager.getLogger();
     public static final File USER_CACHE_FILE = new File("usercache.json");
-    public static final LevelInfo DEMO_LEVEL_INFO = new LevelInfo("Demo World", GameMode.SURVIVAL, false, Difficulty.NORMAL, false, new GameRules(), DataPackSettings.SAFE_MODE);
+    public static final LevelInfo DEMO_LEVEL_INFO = new LevelInfo("Demo World", GameMode.SURVIVAL, false, Difficulty.NORMAL, false, new GameRules(), DataPackSettings.SAFE_MODE, java.util.UUID.randomUUID()); // Loom :: implement per-world uuids
     protected final LevelStorage.Session session;
     protected final WorldSaveHandler field_24371;
     private final Snooper snooper = new Snooper("server", this, Util.getMeasuringTimeMs());
@@ -212,10 +213,18 @@
     private final Executor workerExecutor;
     @Nullable
     private String serverId;
-    private ServerResourceManager serverResourceManager;
+    public ServerResourceManager serverResourceManager; // Loom :: public accessor
     private final StructureManager structureManager;
     protected final SaveProperties saveProperties;
 
+    // Loom start
+    public joptsimple.OptionSet optionSet;
+    public org.loomdev.loom.server.ServerImpl loomServer;
+
+    public static int currentTick = 0;
+    private long lastTick = 0;
+    // Loom end
+
     public static <S extends MinecraftServer> S startServer(Function<Thread, S> function) {
         AtomicReference<S> atomicreference = new AtomicReference();
         Thread thread = new Thread(() -> {
@@ -225,14 +234,14 @@
         thread.setUncaughtExceptionHandler((thread1, throwable) -> {
             MinecraftServer.LOGGER.error((Object) throwable);
         });
-        S s0 = (MinecraftServer) function.apply(thread);
+        S s0 = (S) function.apply(thread); // Loom :: decompile error
 
         atomicreference.set(s0);
         thread.start();
         return s0;
     }
 
-    public MinecraftServer(Thread thread, RegistryTracker.Modifiable registrytracker_modifiable, LevelStorage.Session levelstorage_session, SaveProperties saveproperties, ResourcePackManager<ResourcePackProfile> resourcepackmanager, Proxy proxy, DataFixer datafixer, ServerResourceManager serverresourcemanager, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache, WorldGenerationProgressListenerFactory worldgenerationprogresslistenerfactory) {
+    public MinecraftServer(joptsimple.OptionSet optionSet, Thread thread, RegistryTracker.Modifiable registrytracker_modifiable, LevelStorage.Session levelstorage_session, SaveProperties saveproperties, ResourcePackManager<ResourcePackProfile> resourcepackmanager, Proxy proxy, DataFixer datafixer, ServerResourceManager serverresourcemanager, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache, WorldGenerationProgressListenerFactory worldgenerationprogresslistenerfactory) { // Loom :: add optionSet
         super("Server");
         this.tickTimeTracker = new TickTimeTracker(Util.nanoTimeSupplier, this::getTicks);
         this.profiler = DummyProfiler.INSTANCE;
@@ -265,6 +274,10 @@
         this.structureManager = new StructureManager(serverresourcemanager.getResourceManager(), levelstorage_session, datafixer);
         this.serverThread = thread;
         this.workerExecutor = Util.getServerWorkerExecutor();
+        // Loom start :: start loom server
+        this.optionSet = optionSet;
+        this.loomServer = new org.loomdev.loom.server.ServerImpl(this);
+        // Loom end
     }
 
     private void initScoreboard(PersistentStateManager persistentstatemanager) {
@@ -656,10 +669,13 @@
                 this.metadata.setVersion(new ServerMetadata.Version(SharedConstants.getGameVersion().getName(), SharedConstants.getGameVersion().getProtocolVersion()));
                 this.setFavicon(this.metadata);
 
+                // Loom start :: tick loop improvements
+                long start = System.nanoTime(), currentTime, tickSection = start;
+                lastTick = start - org.loomdev.loom.monitoring.LoomTps.TICK_TIME;
                 while (this.running) {
-                    long i = Util.getMeasuringTimeMs() - this.timeReference;
+                    long i = ((currentTime = System.nanoTime()) / (1000L * 1000L)) - this.timeReference;
 
-                    if (i > 2000L && this.timeReference - this.lastTimeReference >= 15000L) {
+                    if (i > 5000L && this.timeReference - this.lastTimeReference >= 30000L) {
                         long j = i / 50L;
 
                         MinecraftServer.LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", (Object) i, (Object) j);
@@ -667,6 +683,14 @@
                         this.lastTimeReference = this.timeReference;
                     }
 
+                    if (++MinecraftServer.currentTick % org.loomdev.loom.monitoring.LoomTps.SAMPLE_INTERVAL == 0) {
+                        final long diff = currentTime - tickSection;
+                        ((org.loomdev.loom.monitoring.LoomTps) this.loomServer.getTps()).add(diff);
+                        tickSection = currentTime;
+                    }
+
+                    lastTick = currentTime;
+                    // Loom end
                     this.timeReference += 50L;
                     TickDurationMonitor tickdurationmonitor = TickDurationMonitor.create("Server");
 
@@ -850,27 +874,37 @@
         this.tickTime = this.tickTime * 0.8F + (float) l / 1000000.0F * 0.19999999F;
         long i1 = Util.getMeasuringTimeNano();
 
+        ((org.loomdev.loom.monitoring.LoomTickTimes) this.loomServer.getTickTimes()).addTickTimes(this.ticks, l); // Loom :: monitor tick times
+
         this.metricsData.pushSample(i1 - i);
         this.profiler.pop();
     }
 
     protected void tickWorlds(BooleanSupplier booleansupplier) {
+        ((org.loomdev.loom.scheduler.SchedulerImpl) this.loomServer.getScheduler()).pulse(); // Loom :: pulse scheduler
         this.profiler.push("commandFunctions");
         this.getCommandFunctionManager().tick();
         this.profiler.swap("levels");
         Iterator iterator = this.getWorlds().iterator();
 
+        if (this.ticks % 20 == 0) {
+            for (int i = 0; i < this.getPlayerManager().getPlayerList().size(); ++i) {
+                ServerPlayerEntity entityplayer = (ServerPlayerEntity) this.getPlayerManager().getPlayerList().get(i);
+                entityplayer.networkHandler.sendPacket(new WorldTimeUpdateS2CPacket(entityplayer.world.getTime(), ((PlayerImpl) entityplayer.getLoomEntity()).getTime(), entityplayer.world.getGameRules().getBoolean(GameRules.DO_DAYLIGHT_CYCLE))); // Add support for per player time TODO replace second time with player time
+            }
+        }
+
         while (iterator.hasNext()) {
             ServerWorld serverworld = (ServerWorld) iterator.next();
 
             this.profiler.push(() -> {
                 return serverworld + " " + serverworld.getRegistryKey().getValue();
             });
-            if (this.ticks % 20 == 0) {
+            /*if (this.ticks % 20 == 0) {
                 this.profiler.push("timeSync");
                 this.playerManager.sendToDimension(new WorldTimeUpdateS2CPacket(serverworld.getTime(), serverworld.getTimeOfDay(), serverworld.getGameRules().getBoolean(GameRules.DO_DAYLIGHT_CYCLE)), serverworld.getRegistryKey());
                 this.profiler.pop();
-            }
+            }*/
 
             this.profiler.push("tick");
 
@@ -954,7 +988,7 @@
     }
 
     public String getServerModName() {
-        return "vanilla";
+        return loomServer.getName(); // Loom :: display server brand
     }
 
     public CrashReport populateCrashReport(CrashReport crashreport) {
@@ -1299,11 +1333,11 @@
 
     public CompletableFuture<Void> reloadResources(Collection<String> collection) {
         CompletableFuture<Void> completablefuture = CompletableFuture.supplyAsync(() -> {
-            Stream stream = collection.stream();
+            Stream<String> stream = collection.stream(); // Loom :: decompile error
             ResourcePackManager resourcepackmanager = this.dataPackManager;
 
             this.dataPackManager.getClass();
-            return (ImmutableList) stream.map(resourcepackmanager::getProfile).filter(Objects::nonNull).map(ResourcePackProfile::createResourcePack).collect(ImmutableList.toImmutableList());
+            return stream.map(resourcepackmanager::getProfile).filter(Objects::nonNull).map(ResourcePackProfile::createResourcePack).collect(ImmutableList.toImmutableList()); // Loom :: decompile error
         }, this).thenCompose((immutablelist) -> {
             return ServerResourceManager.reload(immutablelist, this.isDedicated() ? CommandManager.RegistrationEnvironment.DEDICATED : CommandManager.RegistrationEnvironment.INTEGRATED, this.getFunctionPermissionLevel(), this.workerExecutor, this);
         }).thenAcceptAsync((serverresourcemanager) -> {
@@ -1719,15 +1753,5 @@
         return this.saveProperties;
     }
 
-    public void executeTask(Runnable runnable) {
-        this.executeTask((ServerTask) runnable);
-    }
-
-    public boolean canExecute(Runnable runnable) {
-        return this.canExecute((ServerTask) runnable);
-    }
-
-    public Runnable createTask(Runnable runnable) {
-        return this.createTask(runnable);
-    }
+    // Loom :: decompile errors
 }
