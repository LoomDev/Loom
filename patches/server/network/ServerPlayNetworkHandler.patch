--- a/net/minecraft/server/network/ServerPlayNetworkHandler.java
+++ b/net/minecraft/server/network/ServerPlayNetworkHandler.java
@@ -401,7 +401,7 @@
     public void onRecipeBookData(RecipeBookDataC2SPacket recipebookdatac2spacket) {
         NetworkThreadUtils.forceMainThread(recipebookdatac2spacket, this, this.player.getServerWorld());
         if (recipebookdatac2spacket.getMode() == RecipeBookDataC2SPacket.Mode.SHOWN) {
-            Optional optional = this.server.getRecipeManager().get(recipebookdatac2spacket.getRecipeId());
+            Optional<? extends net.minecraft.recipe.Recipe<?>> optional = this.server.getRecipeManager().get(recipebookdatac2spacket.getRecipeId());
             ServerRecipeBook serverrecipebook = this.player.getRecipeBook();
 
             optional.ifPresent(serverrecipebook::onRecipeDisplayed);
@@ -1015,7 +1015,10 @@
     public void onDisconnected(Text text) {
         ServerPlayNetworkHandler.LOGGER.info("{} lost connection: {}", (Object) this.player.getName().getString(), (Object) text.getString());
         this.server.forcePlayerSampleUpdate();
-        this.server.getPlayerManager().broadcastChatMessage((new TranslatableText("multiplayer.player.left", new Object[]{this.player.getDisplayName()})).formatted(Formatting.YELLOW), MessageType.SYSTEM, Util.NIL_UUID);
+        // Loom start :: fire PlayerDisconnectedEvent
+        org.loomdev.api.event.player.connection.PlayerDisconnectedEvent event = org.loomdev.loom.event.LoomEventDispatcher.onPlayerDisconnected(player, (new TranslatableText("multiplayer.player.left", new Object[]{this.player.getDisplayName()})).formatted(Formatting.YELLOW));
+        this.server.getPlayerManager().broadcastChatMessage(org.loomdev.loom.util.transformer.TextTransformer.toMinecraft(event.getDisconnectMessage()), MessageType.SYSTEM, Util.NIL_UUID);
+        // Loom end
         this.player.onDisconnect();
         this.server.getPlayerManager().remove(this.player);
         if (this.isHost()) {
@@ -1071,7 +1074,16 @@
     }
 
     public void onGameMessage(ChatMessageC2SPacket chatmessagec2spacket) {
+        // Loom start :: make sure all chat is async
+        if (this.server.isStopped()) {
+            return;
+        }
+
+        if (chatmessagec2spacket.getChatMessage().startsWith("/")) {
         NetworkThreadUtils.forceMainThread(chatmessagec2spacket, this, this.player.getServerWorld());
+        }
+        // Loom end
+
         if (this.player.getClientChatVisibility() == ChatVisibility.HIDDEN) {
             this.sendPacket(new GameMessageS2CPacket((new TranslatableText("chat.cannotSend")).formatted(Formatting.RED), MessageType.SYSTEM, Util.NIL_UUID));
         } else {
@@ -1088,9 +1100,17 @@
             if (s.startsWith("/")) {
                 this.executeCommand(s);
             } else {
-                TranslatableText translatabletext = new TranslatableText("chat.type.text", new Object[]{this.player.getDisplayName(), s});
-
-                this.server.getPlayerManager().broadcastChatMessage(translatabletext, MessageType.CHAT, this.player.getUuid());
+                // Loom start :: fire PlayerMessageSentEvent and apply formatting
+                org.loomdev.loom.event.LoomEventDispatcher.onPlayerMessageSent(this.player, s).thenAccept(event -> {
+                    net.kyori.adventure.text.TextComponent message = net.kyori.adventure.text.TextComponent.builder()
+                            .append(event.getPrefix().orElse(net.kyori.adventure.text.TextComponent.empty()))
+                            .append(event.getMessage())
+                            .append(event.getSuffix().orElse(net.kyori.adventure.text.TextComponent.empty()))
+                            .build();
+
+                    event.getRecipients().forEach(recipient -> recipient.sendMessage(message));
+                });
+                // Loom end
             }
 
             this.messageCooldown += 20;
