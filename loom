#!/usr/bin/env bash

mcVersion="20w45a"

# resolve shell-specifics
case "$(echo "$SHELL" | sed -E 's|/usr(/local)?||g')" in
    "/bin/zsh")
        RCPATH="$HOME/.zshrc"
        SOURCE="${BASH_SOURCE[0]:-${(%):-%N}}"
    ;;
    *)
        RCPATH="$HOME/.bashrc"
        if [[ -f "$HOME/.bash_aliases" ]]; then
            RCPATH="$HOME/.bash_aliases"
        fi
        SOURCE="${BASH_SOURCE[0]}"
    ;;
esac

# get base dir regardless of execution location
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SOURCE=$([[ "$SOURCE" = /* ]] && echo "$SOURCE" || echo "$PWD/${SOURCE#./}")
basedir=$(dirname "$SOURCE")

failed=0
case "$1" in
    "rb" | "rebuild" | "makePatches")
    (
        set -e
        cd "$basedir"
        tools/scripts/makePatches.sh "./tools/decomp/decompiled" || exit 1
    ) || failed=1
    ;;
    "p" | "patch" | "applyPatches")
    (
        set -e
        cd "$basedir"
        tools/scripts/applyPatches.sh "./tools/decomp/decompiled" || exit 1
    ) || failed=1
    ;;
    "s" | "setup")
        set -e
        cd "$basedir"
        tools/scripts/decompile.sh "$basedir" "$mcVersion" || exit 1
        cd "$basedir"
        tools/scripts/applyPatches.sh "./tools/decomp/decompiled" || exit 1
    ;;
    "jar")
        cd "$basedir/tools/Paperclip"
        mvn clean package "-Dmcver=$mcVersion" "-Dpaperjar=$basedir/server/target/loom-$mcVersion.jar" "-Dvanillajar=$basedir/tools/decomp/server.jar" || exit 1
        cp "$basedir/tools/Paperclip/assembly/target/paperclip-$mcVersion.jar" "$basedir/loom-$mcVersion.jar"
    ;;
    *)
        echo "This tool provides a variety of commands to manage a Loom development environment."
        echo ""
        echo " Commands:"
        echo "  * s, setup          | Creates a complete Loom development environment."
        echo "                      | Downloads, maps, and decompiles NMS. This also applies Loom patches."
        echo "                      |"
        echo "  * p, patch          | Applies all Loom patches to NMS without building the project."
        echo "  * rb, rebuild       | Rebuilds and creates patches from your existing project source."
        echo "  * jar               | Creates a distributable Loom server JAR."
    ;;
esac

unset RCPATH
unset SOURCE
unset basedir
if [[ "$failed" == "1" ]]; then
	unset failed
	false
else
	unset failed
	true
fi
