--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -155,7 +155,7 @@
     private final List<ServerPlayer> players = Lists.newArrayList();
     private final ServerChunkCache chunkSource;
     private final MinecraftServer server;
-    private final ServerLevelData serverLevelData;
+    public final ServerLevelData serverLevelData; // Loom :: private -> public (WorldImpl)
     private final EntityTickList entityTickList = new EntityTickList();
     private final PersistentEntitySectionManager<Entity> entityManager;
     public boolean noSave;
@@ -223,6 +223,7 @@
             this.dragonFight = null;
         }
 
+        ((org.loomdev.loom.world.WorldManagerImpl) org.loomdev.api.Loom.getServer().getWorldManager()).registerWorld(getLoomWorld()); // Loom
     }
 
     public void setWeatherParameters(int i, int j, boolean flag, boolean flag1) {
@@ -444,7 +445,7 @@
     }
 
     private void wakeUpAllPlayers() {
-        ((List) this.players.stream().filter(LivingEntity::isSleeping).collect(Collectors.toList())).forEach((serverplayer) -> {
+        (this.players.stream().filter(LivingEntity::isSleeping).collect(Collectors.toList())).forEach((serverplayer) -> { // Loom :: decompile error
             serverplayer.stopSleepInBed(false, false);
         });
     }
@@ -821,7 +822,7 @@
     }
 
     public boolean tryAddFreshEntityWithPassengers(Entity entity) {
-        Stream stream = entity.getSelfAndPassengers().map(Entity::getUUID);
+        Stream<UUID> stream = entity.getSelfAndPassengers().map(Entity::getUUID); // Loom :: decompile error
         PersistentEntitySectionManager persistententitysectionmanager = this.entityManager;
 
         this.entityManager.getClass();
@@ -917,7 +918,7 @@
 
         explosion.explode();
         explosion.finalizeExplosion(false);
-        if (explosion_blockinteraction == Explosion.BlockInteraction.NONE) {
+        if (explosion.blockInteraction == Explosion.BlockInteraction.NONE) { // Loom
             explosion.clearToBlow();
         }
 
@@ -1446,7 +1447,7 @@
     private static <T> String getTypeCount(Iterable<T> iterable, Function<T, String> function) {
         try {
             Object2IntOpenHashMap<String> object2intopenhashmap = new Object2IntOpenHashMap();
-            Iterator iterator = iterable.iterator();
+            Iterator<T> iterator = iterable.iterator(); // Loom :: decompile error
 
             while (iterator.hasNext()) {
                 T t0 = iterator.next();
@@ -1455,7 +1456,7 @@
                 object2intopenhashmap.addTo(s, 1);
             }
 
-            return (String) object2intopenhashmap.object2IntEntrySet().stream().sorted(Comparator.comparing(Entry::getIntValue).reversed()).limit(5L).map((entry) -> {
+            return (String) object2intopenhashmap.object2IntEntrySet().stream().sorted(Comparator.comparing(Entry::getIntValue)).sorted(java.util.Collections.reverseOrder()).limit(5L).map((entry) -> { // Loom :: decompile error
                 return (String) entry.getKey() + ":" + entry.getIntValue();
             }).collect(Collectors.joining(","));
         } catch (Exception exception) {
@@ -1498,6 +1499,7 @@
         return "Chunks[S] W: " + this.chunkSource.gatherStats() + " E: " + this.entityManager.gatherStats();
     }
 
+    /* // Loom start :: decompile error
     public Scoreboard getScoreboard() {
         return this.getScoreboard();
     }
@@ -1513,6 +1515,7 @@
     public TickList getBlockTicks() {
         return this.getBlockTicks();
     }
+     */ // Loom end
 
     final class EntityCallbacks implements LevelCallback<Entity> {
 
@@ -1588,6 +1591,7 @@
 
         }
 
+        /* // Loom start :: decompile error
         public void onTrackingEnd(Object object) {
             this.onTrackingEnd((Entity) object);
         }
@@ -1615,5 +1619,6 @@
         EntityCallbacks(Object object) {
             this();
         }
+         */ // Loom end
     }
 }
