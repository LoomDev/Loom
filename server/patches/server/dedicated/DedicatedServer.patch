--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -74,8 +74,8 @@
     @Nullable
     private final TextFilterClient textFilterClient;
 
-    public DedicatedServer(Thread thread, RegistryAccess.RegistryHolder registryaccess_registryholder, LevelStorageSource.LevelStorageAccess levelstoragesource_levelstorageaccess, PackRepository packrepository, ServerResources serverresources, WorldData worlddata, DedicatedServerSettings dedicatedserversettings, DataFixer datafixer, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, GameProfileCache gameprofilecache, ChunkProgressListenerFactory chunkprogresslistenerfactory) {
-        super(thread, registryaccess_registryholder, levelstoragesource_levelstorageaccess, worlddata, packrepository, Proxy.NO_PROXY, datafixer, serverresources, minecraftsessionservice, gameprofilerepository, gameprofilecache, chunkprogresslistenerfactory);
+    public DedicatedServer(joptsimple.OptionSet optionSet, Thread thread, RegistryAccess.RegistryHolder registryaccess_registryholder, LevelStorageSource.LevelStorageAccess levelstoragesource_levelstorageaccess, PackRepository packrepository, ServerResources serverresources, WorldData worlddata, DedicatedServerSettings dedicatedserversettings, DataFixer datafixer, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, GameProfileCache gameprofilecache, ChunkProgressListenerFactory chunkprogresslistenerfactory) { // Loom
+        super(optionSet, thread, registryaccess_registryholder, levelstoragesource_levelstorageaccess, worlddata, packrepository, Proxy.NO_PROXY, datafixer, serverresources, minecraftsessionservice, gameprofilerepository, gameprofilecache, chunkprogresslistenerfactory); // Loom
         this.settings = dedicatedserversettings;
         this.rconConsoleSource = new RconConsoleSource(this);
         this.textFilterClient = TextFilterClient.createFromConfig(dedicatedserversettings.getProperties().textFilteringConfig);
@@ -84,7 +84,10 @@
     public boolean initServer() throws IOException {
         Thread thread = new Thread("Server console handler") {
             public void run() {
-                BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
+                // Loom start :: Terminal console appender
+                new org.loomdev.loom.LoomConsole(DedicatedServer.this).start();
+
+                /* BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
 
                 String s;
 
@@ -94,8 +97,9 @@
                     }
                 } catch (IOException ioexception) {
                     DedicatedServer.LOGGER.error("Exception handling console input", ioexception);
-                }
+                } */
 
+                // Loom end
             }
         };
 
@@ -168,8 +172,10 @@
             SkullBlockEntity.setProfileCache(this.getProfileCache());
             SkullBlockEntity.setSessionService(this.getSessionService());
             GameProfileCache.setUsesAuthentication(this.usesAuthentication());
+            loomServer.getPluginManager().loadOnServerStart(); // Loom :: load plugins
             DedicatedServer.LOGGER.info("Preparing level \"{}\"", this.getLevelIdName());
             this.loadLevel();
+            loomServer.getPluginManager().enableOnServerStart(); // Loom :: enable plugins
             long j = Util.getNanos() - i;
             String s = String.format(Locale.ROOT, "%.3fs", (double) j / 1.0E9D);
 
@@ -552,7 +558,9 @@
         return this.settings.getProperties().forceGameMode ? this.worldData.getGameType() : null;
     }
 
+    /* // Loom start :: decompile error
     public PlayerList getPlayerList() {
         return this.getPlayerList();
     }
+     */ // Loom end
 }
