--- a/net/minecraft/server/world/ServerWorld.java
+++ b/net/minecraft/server/world/ServerWorld.java
@@ -19,16 +19,7 @@
 import java.io.Writer;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collection;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Queue;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.function.Function;
@@ -156,7 +147,7 @@
     private final ServerChunkManager serverChunkManager;
     boolean inEntityTick;
     private final MinecraftServer server;
-    private final ServerWorldProperties worldProperties;
+    public final ServerWorldProperties worldProperties; // Loom :: public access
     public boolean savingDisabled;
     private boolean allPlayersSleeping;
     private int idleTimeout;
@@ -208,6 +199,7 @@
             this.enderDragonFight = null;
         }
 
+        ((org.loomdev.loom.server.ServerImpl) org.loomdev.api.Loom.getServer()).registerWorld(this); // Loom
     }
 
     public void setWeather(int i, int j, boolean flag, boolean flag1) {
@@ -450,7 +442,7 @@
 
     private void wakeSleepingPlayers() {
         ((List) this.players.stream().filter(LivingEntity::isSleeping).collect(Collectors.toList())).forEach((serverplayerentity) -> {
-            serverplayerentity.wakeUp(false, false);
+            ((ServerPlayerEntity) serverplayerentity).wakeUp(false, false); // Loom :: decompile error
         });
     }
 
@@ -1092,7 +1084,7 @@
 
         explosion.collectBlocksAndDamageEntities();
         explosion.affectWorld(false);
-        if (explosion_destructiontype == Explosion.DestructionType.NONE) {
+        if (explosion.destructionType == Explosion.DestructionType.NONE) {
             explosion.clearAffectedBlocks();
         }
 
@@ -1583,8 +1575,8 @@
 
     private static <T> String method_31270(Collection<T> collection, Function<T, Identifier> function) {
         try {
-            Object2IntOpenHashMap<Identifier> object2intopenhashmap = new Object2IntOpenHashMap();
-            Iterator iterator = collection.iterator();
+            Object2IntOpenHashMap<Identifier> object2intopenhashmap = new Object2IntOpenHashMap<>();
+            Iterator<T> iterator = collection.iterator(); // Loom :: decompile error
 
             while (iterator.hasNext()) {
                 T t0 = iterator.next();
@@ -1593,7 +1585,7 @@
                 object2intopenhashmap.addTo(identifier, 1);
             }
 
-            return (String) object2intopenhashmap.object2IntEntrySet().stream().sorted(Comparator.comparing(it.unimi.dsi.fastutil.objects.Object2IntMap.Entry::getIntValue).reversed()).limit(5L).map((it_unimi_dsi_fastutil_objects_object2intmap_entry) -> {
+            return (String) object2intopenhashmap.object2IntEntrySet().stream().sorted(Comparator.comparing(it.unimi.dsi.fastutil.objects.Object2IntMap.Entry::getIntValue)).sorted(Collections.reverseOrder()).limit(5L).map((it_unimi_dsi_fastutil_objects_object2intmap_entry) -> {
                 return it_unimi_dsi_fastutil_objects_object2intmap_entry.getKey() + ":" + it_unimi_dsi_fastutil_objects_object2intmap_entry.getIntValue();
             }).collect(Collectors.joining(","));
         } catch (Exception exception) {
@@ -1615,19 +1607,5 @@
         });
     }
 
-    public Scoreboard getScoreboard() {
-        return this.getScoreboard();
-    }
-
-    public ChunkManager getChunkManager() {
-        return this.getChunkManager();
-    }
-
-    public TickScheduler getFluidTickScheduler() {
-        return this.getFluidTickScheduler();
-    }
-
-    public TickScheduler getBlockTickScheduler() {
-        return this.getBlockTickScheduler();
-    }
+    // Loom :: decompile error
 }
