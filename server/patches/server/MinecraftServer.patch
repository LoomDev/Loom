--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -151,6 +151,7 @@
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.loomdev.loom.entity.player.PlayerImpl;
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements SnooperPopulator, CommandSource, AutoCloseable {
 
@@ -218,8 +219,14 @@
     @Nullable
     private String serverId;
     private ServerResources resources;
-    private final StructureManager structureManager;
+    public final StructureManager structureManager; // Loom :: private -> public
     protected final WorldData worldData;
+    // Loom start
+    public joptsimple.OptionSet optionSet;
+    public org.loomdev.loom.server.ServerImpl loomServer;
+    public static int currentTick = 0;
+    private long lastTick = 0;
+    // Loom end
 
     public static <S extends MinecraftServer> S spin(Function<Thread, S> function) {
         AtomicReference<S> atomicreference = new AtomicReference();
@@ -230,14 +237,14 @@
         thread.setUncaughtExceptionHandler((thread1, throwable) -> {
             MinecraftServer.LOGGER.error(throwable);
         });
-        S s0 = (MinecraftServer) function.apply(thread);
+        S s0 = (S) function.apply(thread); // Loom :: decompile error
 
         atomicreference.set(s0);
         thread.start();
         return s0;
     }
 
-    public MinecraftServer(Thread thread, RegistryAccess.RegistryHolder registryaccess_registryholder, LevelStorageSource.LevelStorageAccess levelstoragesource_levelstorageaccess, WorldData worlddata, PackRepository packrepository, Proxy proxy, DataFixer datafixer, ServerResources serverresources, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, GameProfileCache gameprofilecache, ChunkProgressListenerFactory chunkprogresslistenerfactory) {
+    public MinecraftServer(joptsimple.OptionSet optionSet, Thread thread, RegistryAccess.RegistryHolder registryaccess_registryholder, LevelStorageSource.LevelStorageAccess levelstoragesource_levelstorageaccess, WorldData worlddata, PackRepository packrepository, Proxy proxy, DataFixer datafixer, ServerResources serverresources, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, GameProfileCache gameprofilecache, ChunkProgressListenerFactory chunkprogresslistenerfactory) { // Loom
         super("Server");
         this.continousProfiler = new ContinuousProfiler(Util.timeSource, this::getTickCount);
         this.profiler = InactiveProfiler.INSTANCE;
@@ -270,6 +277,10 @@
         this.structureManager = new StructureManager(serverresources.getResourceManager(), levelstoragesource_levelstorageaccess, datafixer);
         this.serverThread = thread;
         this.executor = Util.backgroundExecutor();
+        // Loom start :: start Loom server
+        this.optionSet = optionSet;
+        this.loomServer = new org.loomdev.loom.server.ServerImpl(this);
+        // Loom end
     }
 
     private void readScoreboard(DimensionDataStorage dimensiondatastorage) {
@@ -656,9 +667,13 @@
                 this.status.setVersion(new ServerStatus.Version(SharedConstants.getCurrentVersion().getName(), SharedConstants.getCurrentVersion().getProtocolVersion()));
                 this.updateStatusIcon(this.status);
 
+                // Loom start :: tick loop improvements
+                long start = System.nanoTime(), currentTime, tickSection = start;
+                lastTick = start - org.loomdev.loom.monitoring.LoomTps.TICK_TIME;
                 while (this.running) {
-                    long i = Util.getMillis() - this.nextTickTime;
+                    long i = ((currentTime = System.nanoTime()) / (1000L * 1000L)) - this.nextTickTime;
 
+                    // TODO Check if this is necessasry if (i > 5000L && this.timeReference - this.lastTimeReference >= 30000L) {
                     if (i > 2000L && this.nextTickTime - this.lastOverloadWarning >= 15000L) {
                         long j = i / 50L;
 
@@ -667,6 +682,14 @@
                         this.lastOverloadWarning = this.nextTickTime;
                     }
 
+                    if (++MinecraftServer.currentTick % org.loomdev.loom.monitoring.LoomTps.SAMPLE_INTERVAL == 0) {
+                        long diff = currentTime - tickSection;
+                        ((org.loomdev.loom.monitoring.LoomTps) this.loomServer.getTps()).add(diff);
+                        tickSection = currentTime;
+                    }
+
+                    lastTick = currentTime;
+                    // Loom end
                     this.nextTickTime += 50L;
                     SingleTickProfiler singletickprofiler = SingleTickProfiler.createTickProfiler("Server");
 
@@ -850,27 +873,39 @@
         this.averageTickTime = this.averageTickTime * 0.8F + (float) l / 1000000.0F * 0.19999999F;
         long i1 = Util.getNanos();
 
+        ((org.loomdev.loom.monitoring.LoomTickTimes) this.loomServer.getTickTimes()).addTickTimes(this.tickCount, l); // Loom :: monitor tick times
         this.frameTimer.logFrameDuration(i1 - i);
         this.profiler.pop();
     }
 
     protected void tickChildren(BooleanSupplier booleansupplier) {
+        this.loomServer.getScheduler().pulse(); // Loom :: pulse scheduler
         this.profiler.push("commandFunctions");
         this.getFunctions().tick();
         this.profiler.popPush("levels");
         Iterator iterator = this.getAllLevels().iterator();
 
+        // Loom start :: better time updates
+        if (this.tickCount % 20 == 0) {
+            var playerList = this.playerList.getPlayers();
+            for (int i = 0; i < playerList.size(); ++i) {
+                var serverplayer = playerList.get(i);
+                serverplayer.connection.send(new ClientboundSetTimePacket(serverplayer.level.getDayTime(), ((PlayerImpl) serverplayer.getLoomEntity()).getTime(), serverplayer.level.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT))); // Add support for per player time TODO replace second time with player time
+            }
+        }
+
         while (iterator.hasNext()) {
             ServerLevel serverlevel = (ServerLevel) iterator.next();
 
             this.profiler.push(() -> {
                 return serverlevel + " " + serverlevel.dimension().location();
             });
-            if (this.tickCount % 20 == 0) {
+            /*if (this.tickCount % 20 == 0) {
                 this.profiler.push("timeSync");
                 this.playerList.broadcastAll(new ClientboundSetTimePacket(serverlevel.getGameTime(), serverlevel.getDayTime(), serverlevel.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)), serverlevel.dimension());
                 this.profiler.pop();
-            }
+            }*/
+            // Loom end
 
             this.profiler.push("tick");
 
@@ -954,7 +989,7 @@
     }
 
     public String getServerModName() {
-        return "vanilla";
+        return loomServer.getName(); // Loom :: display server brand
     }
 
     public CrashReport fillReport(CrashReport crashreport) {
@@ -1307,11 +1342,11 @@
 
     public CompletableFuture<Void> reloadResources(Collection<String> collection) {
         CompletableFuture<Void> completablefuture = CompletableFuture.supplyAsync(() -> {
-            Stream stream = collection.stream();
+            Stream<String> stream = collection.stream(); // Loom :: decompile error
             PackRepository packrepository = this.packRepository;
 
             this.packRepository.getClass();
-            return (ImmutableList) stream.map(packrepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList());
+            return stream.map(packrepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()); // Loom :: decompile error
         }, this).thenCompose((immutablelist) -> {
             return ServerResources.loadResources(immutablelist, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this);
         }).thenAcceptAsync((serverresources) -> {
@@ -1740,6 +1775,7 @@
         return false;
     }
 
+    /* // Loom start :: decompile error
     public void doRunTask(Runnable runnable) {
         this.doRunTask((TickTask) runnable);
     }
@@ -1751,4 +1787,5 @@
     public Runnable wrapRunnable(Runnable runnable) {
         return this.wrapRunnable(runnable);
     }
+     */ // Loom end
 }
