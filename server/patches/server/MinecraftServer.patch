--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -219,6 +219,10 @@
     private ServerResources resources;
     private final StructureManager structureManager;
     protected final WorldData worldData;
+    // Loom start
+    public org.loomdev.loom.server.ServerImpl loomServer;
+    public static int currentTick;
+    // Loom end
 
     public static <S extends MinecraftServer> S spin(Function<Thread, S> function) {
         AtomicReference<S> atomicreference = new AtomicReference();
@@ -229,14 +233,14 @@
         thread.setUncaughtExceptionHandler((thread1, throwable) -> {
             MinecraftServer.LOGGER.error(throwable);
         });
-        S s0 = (MinecraftServer) function.apply(thread);
+        S s0 = (S) function.apply(thread); // Loom :: decompile error
 
         atomicreference.set(s0);
         thread.start();
         return s0;
     }
 
-    public MinecraftServer(Thread thread, RegistryAccess.RegistryHolder registryaccess_registryholder, LevelStorageSource.LevelStorageAccess levelstoragesource_levelstorageaccess, WorldData worlddata, PackRepository packrepository, Proxy proxy, DataFixer datafixer, ServerResources serverresources, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, GameProfileCache gameprofilecache, ChunkProgressListenerFactory chunkprogresslistenerfactory) {
+    public MinecraftServer(joptsimple.OptionSet optionSet, Thread thread, RegistryAccess.RegistryHolder registryaccess_registryholder, LevelStorageSource.LevelStorageAccess levelstoragesource_levelstorageaccess, WorldData worlddata, PackRepository packrepository, Proxy proxy, DataFixer datafixer, ServerResources serverresources, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, GameProfileCache gameprofilecache, ChunkProgressListenerFactory chunkprogresslistenerfactory) { // Loom
         super("Server");
         this.continousProfiler = new ContinuousProfiler(Util.timeSource, this::getTickCount);
         this.profiler = InactiveProfiler.INSTANCE;
@@ -269,6 +273,7 @@
         this.structureManager = new StructureManager(serverresources.getResourceManager(), levelstoragesource_levelstorageaccess, datafixer);
         this.serverThread = thread;
         this.executor = Util.backgroundExecutor();
+        this.loomServer = new org.loomdev.loom.server.ServerImpl(this, optionSet); // Loom
     }
 
     private void readScoreboard(DimensionDataStorage dimensiondatastorage) {
@@ -569,6 +574,7 @@
     }
 
     protected void stopServer() {
+        loomServer.shutdown(); // Loom
         MinecraftServer.LOGGER.info("Stopping server");
         if (this.getConnection() != null) {
             this.getConnection().stop();
@@ -652,10 +658,13 @@
                 this.status.setVersion(new ServerStatus.Version(SharedConstants.getCurrentVersion().getName(), SharedConstants.getCurrentVersion().getProtocolVersion()));
                 this.updateStatusIcon(this.status);
 
+                // Loom start :: tick loop improvements
+                long start = System.nanoTime(), currentTime, tickSection = start;
+                long lastTick = start - org.loomdev.loom.monitoring.LoomTps.TICK_TIME;
                 while (this.running) {
-                    long i = Util.getMillis() - this.nextTickTime;
+                    long i = ((currentTime = System.nanoTime()) / (1000L * 1000L)) - this.nextTickTime;
 
-                    if (i > 2000L && this.nextTickTime - this.lastOverloadWarning >= 15000L) {
+                    if (i > 5000L && this.nextTickTime - this.lastOverloadWarning >= 30000L) {
                         long j = i / 50L;
 
                         MinecraftServer.LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
@@ -663,6 +672,14 @@
                         this.lastOverloadWarning = this.nextTickTime;
                     }
 
+                    if (++MinecraftServer.currentTick % org.loomdev.loom.monitoring.LoomTps.SAMPLE_INTERVAL == 0) {
+                        long diff = currentTime - tickSection;
+                        ((org.loomdev.loom.monitoring.LoomTps) this.loomServer.getTps()).add(diff);
+                        tickSection = currentTime;
+                    }
+
+                    lastTick = currentTime;
+                    // Loom end
                     this.nextTickTime += 50L;
                     SingleTickProfiler singletickprofiler = SingleTickProfiler.createTickProfiler("Server");
 
@@ -846,11 +863,13 @@
         this.averageTickTime = this.averageTickTime * 0.8F + (float) l / 1000000.0F * 0.19999999F;
         long i1 = Util.getNanos();
 
+        ((org.loomdev.loom.monitoring.LoomTickTimes) this.loomServer.getTickTimes()).addTickTimes(this.tickCount, l); // Loom :: monitor tick times
         this.frameTimer.logFrameDuration(i1 - i);
         this.profiler.pop();
     }
 
     protected void tickChildren(BooleanSupplier booleansupplier) {
+        this.loomServer.getScheduler().serverTick(); // Loom :: pulse scheduler
         this.profiler.push("commandFunctions");
         this.getFunctions().tick();
         this.profiler.popPush("levels");
@@ -950,7 +969,7 @@
     }
 
     public String getServerModName() {
-        return "vanilla";
+        return loomServer.getName(); // Loom :: display server brand
     }
 
     public CrashReport fillReport(CrashReport crashreport) {
@@ -1303,11 +1322,11 @@
 
     public CompletableFuture<Void> reloadResources(Collection<String> collection) {
         CompletableFuture<Void> completablefuture = CompletableFuture.supplyAsync(() -> {
-            Stream stream = collection.stream();
+            Stream<String> stream = collection.stream(); // Loom :: decompile error
             PackRepository packrepository = this.packRepository;
 
             this.packRepository.getClass();
-            return (ImmutableList) stream.map(packrepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList());
+            return stream.map(packrepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()); // Loom :: decompile error
         }, this).thenCompose((immutablelist) -> {
             return ServerResources.loadResources(immutablelist, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this);
         }).thenAcceptAsync((serverresources) -> {
@@ -1740,6 +1759,7 @@
         return false;
     }
 
+    /* // Loom start :: decompile error
     public void doRunTask(Runnable runnable) {
         this.doRunTask((TickTask) runnable);
     }
@@ -1751,4 +1771,5 @@
     public Runnable wrapRunnable(Runnable runnable) {
         return this.wrapRunnable(runnable);
     }
+     */ // Loom end
 }
