--- a/net/minecraft//server/MinecraftServer.java
+++ b/net/minecraft//server/MinecraftServer.java
@@ -163,6 +163,10 @@
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements SnooperPopulator, CommandSource, AutoCloseable {
 
+    // Loom start
+    public org.loomdev.loom.server.ServerImpl loomServer;
+    public int currentTick;
+    // Loom end
     static final Logger LOGGER = LogManager.getLogger();
     private static final float AVERAGE_TICK_TIME_SMOOTHING = 0.8F;
     private static final int TICK_STATS_SPAN = 100;
@@ -261,14 +265,14 @@
         thread.setUncaughtExceptionHandler((thread1, throwable) -> {
             MinecraftServer.LOGGER.error(throwable);
         });
-        S s0 = (MinecraftServer) function.apply(thread);
+        S s0 = (S) function.apply(thread); // Loom :: decompile error
 
         atomicreference.set(s0);
         thread.start();
         return s0;
     }
 
-    public MinecraftServer(Thread thread, RegistryAccess.RegistryHolder registryaccess_registryholder, LevelStorageSource.LevelStorageAccess levelstoragesource_levelstorageaccess, WorldData worlddata, PackRepository packrepository, Proxy proxy, DataFixer datafixer, ServerResources serverresources, @Nullable MinecraftSessionService minecraftsessionservice, @Nullable GameProfileRepository gameprofilerepository, @Nullable GameProfileCache gameprofilecache, ChunkProgressListenerFactory chunkprogresslistenerfactory) {
+    public MinecraftServer(joptsimple.OptionSet optionSet, Thread thread, RegistryAccess.RegistryHolder registryaccess_registryholder, LevelStorageSource.LevelStorageAccess levelstoragesource_levelstorageaccess, WorldData worlddata, PackRepository packrepository, Proxy proxy, DataFixer datafixer, ServerResources serverresources, @Nullable MinecraftSessionService minecraftsessionservice, @Nullable GameProfileRepository gameprofilerepository, @Nullable GameProfileCache gameprofilecache, ChunkProgressListenerFactory chunkprogresslistenerfactory) { // Loom
         super("Server");
         this.metricsRecorder = InactiveMetricsRecorder.INSTANCE;
         this.profiler = this.metricsRecorder.getProfiler();
@@ -310,13 +314,14 @@
         this.structureManager = new StructureManager(serverresources.getResourceManager(), levelstoragesource_levelstorageaccess, datafixer);
         this.serverThread = thread;
         this.executor = Util.backgroundExecutor();
+        this.loomServer = new org.loomdev.loom.server.ServerImpl(this, optionSet); // Loom
     }
 
     private void readScoreboard(DimensionDataStorage dimensiondatastorage) {
         ServerScoreboard serverscoreboard = this.getScoreboard();
 
         Objects.requireNonNull(serverscoreboard);
-        Function function = serverscoreboard::createData;
+        Function<net.minecraft.nbt.CompoundTag, net.minecraft.world.scores.ScoreboardSaveData> function = serverscoreboard::createData; // Loom :: decompile error
         ServerScoreboard serverscoreboard1 = this.getScoreboard();
 
         Objects.requireNonNull(serverscoreboard1);
@@ -639,6 +644,7 @@
 
     public void stopServer() {
         MinecraftServer.LOGGER.info("Stopping server");
+        loomServer.shutdown(); // Loom
         if (this.getConnection() != null) {
             this.getConnection().stop();
         }
@@ -687,6 +693,12 @@
             MinecraftServer.LOGGER.error("Failed to unlock level {}", this.storageSource.getLevelId(), ioexception1);
         }
 
+        // Loom start :: Terminal console appender
+        try {
+            net.minecrell.terminalconsole.TerminalConsoleAppender.close();
+        } catch(Throwable ignored) {
+        }
+        // Loom end
     }
 
     public String getLocalIp() {
@@ -721,10 +733,12 @@
                 this.status.setVersion(new ServerStatus.Version(SharedConstants.getCurrentVersion().getName(), SharedConstants.getCurrentVersion().getProtocolVersion()));
                 this.updateStatusIcon(this.status);
 
+                // Loom start :: tick loop improvements
+                long start = System.nanoTime(), currentTime, tickSection = start;
                 while (this.running) {
-                    long i = Util.getMillis() - this.nextTickTime;
+                    long i = ((currentTime = System.nanoTime()) / (1000L * 1000L)) - this.nextTickTime;
 
-                    if (i > 2000L && this.nextTickTime - this.lastOverloadWarning >= 15000L) {
+                    if (i > 5000L && this.nextTickTime - this.lastOverloadWarning >= 30000L) {
                         long j = i / 50L;
 
                         MinecraftServer.LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
@@ -737,6 +751,13 @@
                         this.debugCommandProfiler = new MinecraftServer.TimeProfiler(Util.getNanos(), this.tickCount);
                     }
 
+                    if (++currentTick % org.loomdev.loom.monitoring.LoomTps.SAMPLE_INTERVAL == 0) {
+                        long diff = currentTime - tickSection;
+                        ((org.loomdev.loom.monitoring.LoomTps) this.loomServer.getTps()).add(diff);
+                        tickSection = currentTime;
+                    }
+
+                    // Loom end
                     this.nextTickTime += 50L;
                     this.startMetricsRecordingTick();
                     this.profiler.push("tick");
@@ -835,7 +856,7 @@
         }
     }
 
-    protected void doRunTask(TickTask ticktask) {
+    public void doRunTask(TickTask ticktask) { // Loom :: decompile error
         this.getProfiler().incrementCounter("runTask");
         super.doRunTask(ticktask);
     }
@@ -883,6 +904,7 @@
         long i = Util.getNanos();
 
         ++this.tickCount;
+        org.loomdev.loom.event.LoomEventDispatcher.fire(new org.loomdev.loom.event.server.TickEventImpl.PreImpl(getTickCount())); // Loom :: fire TickEvent.Pre
         this.tickChildren(booleansupplier);
         if (i - this.lastServerStatus >= 5000000000L) {
             this.lastServerStatus = i;
@@ -917,17 +939,20 @@
         }
 
         this.profiler.pop();
+        org.loomdev.loom.event.LoomEventDispatcher.fire(new org.loomdev.loom.event.server.TickEventImpl.PostImpl(getTickCount())); // Loom :: fire TickEvent.Post
         this.profiler.push("tallying");
         long l = this.tickTimes[this.tickCount % 100] = Util.getNanos() - i;
 
         this.averageTickTime = this.averageTickTime * 0.8F + (float) l / 1000000.0F * 0.19999999F;
         long i1 = Util.getNanos();
 
+        ((org.loomdev.loom.monitoring.LoomTickTimes) this.loomServer.getTickTimes()).addTickTimes(getTickCount(), l); // Loom
         this.frameTimer.logFrameDuration(i1 - i);
         this.profiler.pop();
     }
 
     public void tickChildren(BooleanSupplier booleansupplier) {
+        this.loomServer.getScheduler().serverTick(); // Loom :: pulse scheduler
         this.profiler.push("commandFunctions");
         this.getFunctions().tick();
         this.profiler.popPush("levels");
@@ -948,6 +973,7 @@
             this.profiler.push("tick");
 
             try {
+                org.loomdev.loom.event.LoomEventDispatcher.fire(new org.loomdev.loom.event.server.TickEventImpl.WorldImpl(getTickCount(), serverlevel)); // Loom :: fire TickEvent.World
                 serverlevel.tick(booleansupplier);
             } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.forThrowable(throwable, "Exception ticking world");
@@ -1032,7 +1058,7 @@
 
     @DontObfuscate
     public String getServerModName() {
-        return "vanilla";
+        return loomServer.getImplementationName(); // Loom :: display server brand
     }
 
     public SystemReport fillSystemReport(SystemReport systemreport) {
@@ -1077,7 +1103,7 @@
     public abstract Optional<String> getModdedStatus();
 
     public void sendMessage(Component component, UUID uuid) {
-        MinecraftServer.LOGGER.info(component.getString());
+        MinecraftServer.LOGGER.info(org.loomdev.loom.util.ChatToLegacyConverter.toLegacy(component)); // Loom :: Show formatting in console
     }
 
     public KeyPair getKeyPair() {
@@ -1398,11 +1424,11 @@
 
     public CompletableFuture<Void> reloadResources(Collection<String> collection) {
         CompletableFuture<Void> completablefuture = CompletableFuture.supplyAsync(() -> {
-            Stream stream = collection.stream();
+            Stream<String> stream = collection.stream(); // Loom :: decompile error
             PackRepository packrepository = this.packRepository;
 
             Objects.requireNonNull(this.packRepository);
-            return (ImmutableList) stream.map(packrepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList());
+            return stream.map(packrepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()); // Loom :: decompile error
         }, this).thenCompose((immutablelist) -> {
             return ServerResources.loadResources(immutablelist, this.registryHolder, this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED, this.getFunctionCompilationLevel(), this.executor, this);
         }).thenAcceptAsync((serverresources) -> {
@@ -1855,6 +1881,7 @@
         }
     }
 
+    /* // Loom start :: decompile error
     public void doRunTask(Runnable runnable) {
         this.doRunTask((TickTask) runnable);
     }
@@ -1866,6 +1893,7 @@
     public Runnable wrapRunnable(Runnable runnable) {
         return this.wrapRunnable(runnable);
     }
+     */ // Loom end
 
     private static class TimeProfiler {
 
