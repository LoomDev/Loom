--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -113,6 +113,15 @@
 
 public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
+    // Loom start
+    private org.loomdev.loom.entity.EntityImpl entityImpl;
+    public org.loomdev.loom.entity.EntityImpl getLoomEntity() {
+        if (entityImpl == null) {
+            entityImpl = org.loomdev.loom.entity.LoomEntityFactory.getLoomEntity(this);
+        }
+        return entityImpl;
+    }
+    // Loom end
     protected static final Logger LOGGER = LogManager.getLogger();
     private static final AtomicInteger ENTITY_COUNTER = new AtomicInteger();
     private static final List<ItemStack> EMPTY_LIST = Collections.emptyList();
@@ -143,7 +152,7 @@
     public boolean hurtMarked;
     protected Vec3 stuckSpeedMultiplier;
     @Nullable
-    private Entity.RemovalReason removalReason;
+    public Entity.RemovalReason removalReason; // Loom :: private -> public (EntityImpl)
     public float walkDistO;
     public float walkDist;
     public float moveDist;
@@ -165,7 +174,7 @@
     protected Tag<Fluid> fluidOnEyes;
     public int invulnerableTime;
     protected boolean firstTick;
-    protected final SynchedEntityData entityData;
+    public final SynchedEntityData entityData; // Loom :: protected -> public
     protected static final EntityDataAccessor<Byte> DATA_SHARED_FLAGS_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BYTE);
     private static final EntityDataAccessor<Integer> DATA_AIR_SUPPLY_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Optional<Component>> DATA_CUSTOM_NAME = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.OPTIONAL_COMPONENT);
@@ -178,7 +187,7 @@
     private Vec3 packetCoordinates;
     public boolean noCulling;
     public boolean hasImpulse;
-    private int portalCooldown;
+    public int portalCooldown; // Loom :: private -> public (EntityImpl)
     protected boolean isInsidePortal;
     protected int portalTime;
     protected BlockPos portalEntrancePos;
@@ -196,6 +205,7 @@
     public boolean wasOnFire;
     private float crystalSoundIntensity;
     private int lastCrystalSoundPlayTick;
+    public Optional<Boolean> fireResistantOverride = Optional.empty(); // Loom
 
     public Entity(EntityType<?> entitytype, Level level) {
         this.id = Entity.ENTITY_COUNTER.incrementAndGet();
@@ -477,7 +487,7 @@
         this.setRemainingFireTicks(0);
     }
 
-    protected void outOfWorld() {
+    public void outOfWorld() { // Loom :: protected -> public
         this.discard();
     }
 
@@ -930,7 +940,7 @@
 
     protected void onFlap() {}
 
-    protected boolean isFlapping() {
+    public boolean isFlapping() { // Loom :: protected -> public (EntityImpl)
         return false;
     }
 
@@ -982,7 +992,7 @@
     }
 
     public boolean fireImmune() {
-        return this.getType().fireImmune();
+        return fireResistantOverride.orElse(this.getType().fireImmune()); // Loom
     }
 
     public boolean causeFallDamage(float f, float f1, DamageSource damagesource) {
@@ -2268,7 +2278,7 @@
                     }
 
                     return PortalShape.createPortalInfo(serverlevel, blockutil_foundrectangle, direction_axis, vec3, this.getDimensions(this.getPose()), this.getDeltaMovement(), this.yRot, this.xRot);
-                }).orElse((Object) null);
+                }).orElse(null); // Loom :: decompile error
             }
         } else {
             BlockPos blockpos1;
