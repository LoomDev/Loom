--- a/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -48,12 +48,13 @@
 
 public class Hoglin extends Animal implements Enemy, HoglinBase {
 
+    public static final int CONVERSION_TIME = 300; // Loom :: (HoglinImpl)
     private static final EntityDataAccessor<Boolean> DATA_IMMUNE_TO_ZOMBIFICATION = SynchedEntityData.defineId(Hoglin.class, EntityDataSerializers.BOOLEAN);
     private int attackAnimationRemainingTicks;
-    private int timeInOverworld;
+    public int timeInOverworld; // Loom :: private -> public (HoglinImpl)
     private boolean cannotBeHunted;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Hoglin>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ADULT, SensorType.HOGLIN_SPECIFIC_SENSOR);
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED});
+    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED); // Loom :: decompile error
 
     public Hoglin(EntityType<? extends Hoglin> entitytype, Level level) {
         super(entitytype, level);
@@ -110,7 +111,7 @@
     }
 
     public Brain<Hoglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Hoglin>) super.getBrain(); // Loom :: decompile error
     }
 
     protected void customServerAiStep() {
@@ -120,7 +121,7 @@
         HoglinAi.updateActivity(this);
         if (this.isConverting()) {
             ++this.timeInOverworld;
-            if (this.timeInOverworld > 300) {
+            if (this.timeInOverworld > CONVERSION_TIME) { // Loom
                 this.playSound(SoundEvents.HOGLIN_CONVERTED_TO_ZOMBIFIED);
                 this.finishConversion((ServerLevel) this.level);
             }
@@ -192,7 +193,7 @@
         return this.xpReward;
     }
 
-    private void finishConversion(ServerLevel serverlevel) {
+    public void finishConversion(ServerLevel serverlevel) { // Loom :: private -> public (HoglinImpl)
         Zoglin zoglin = (Zoglin) this.convertTo(EntityType.ZOGLIN, true);
 
         if (zoglin != null) {
@@ -238,7 +239,7 @@
         this.getEntityData().set(Hoglin.DATA_IMMUNE_TO_ZOMBIFICATION, flag);
     }
 
-    private boolean isImmuneToZombification() {
+    public boolean isImmuneToZombification() { // Loom :: private -> public (HoglinImpl)
         return (Boolean) this.getEntityData().get(Hoglin.DATA_IMMUNE_TO_ZOMBIFICATION);
     }
 
@@ -246,7 +247,7 @@
         return !this.level.dimensionType().piglinSafe() && !this.isImmuneToZombification() && !this.isNoAi();
     }
 
-    private void setCannotBeHunted(boolean flag) {
+    public void setCannotBeHunted(boolean flag) { // Loom :: private -> public (HoglinImpl)
         this.cannotBeHunted = flag;
     }
 
@@ -274,7 +275,7 @@
     }
 
     protected SoundEvent getAmbientSound() {
-        return this.level.isClientSide ? null : (SoundEvent) HoglinAi.getSoundForCurrentActivity(this).orElse((Object) null);
+        return this.level.isClientSide ? null : (SoundEvent) HoglinAi.getSoundForCurrentActivity(this).orElse(null); // Loom :: decompile error
     }
 
     protected SoundEvent getHurtSound(DamageSource damagesource) {
