--- a/net/minecraft//world/entity/animal/Bee.java
+++ b/net/minecraft//world/entity/animal/Bee.java
@@ -125,16 +125,16 @@
     private float rollAmountO;
     private int timeSinceSting;
     int ticksWithoutNectarSinceExitingHive;
-    private int stayOutOfHiveCountdown;
+    public int stayOutOfHiveCountdown; // Loom :: private -> public (BeeImpl)
     private int numCropsGrownSincePollination;
     private static final int COOLDOWN_BEFORE_LOCATING_NEW_HIVE = 200;
     int remainingCooldownBeforeLocatingNewHive;
     private static final int COOLDOWN_BEFORE_LOCATING_NEW_FLOWER = 200;
-    int remainingCooldownBeforeLocatingNewFlower;
+    public int remainingCooldownBeforeLocatingNewFlower; // Loom :: package-private -> public (BeeImpl)
     @Nullable
     BlockPos savedFlowerPos;
     @Nullable
-    BlockPos hivePos;
+    public BlockPos hivePos; // Loom :: package-private -> public (BeeImpl)
     Bee.BeePollinateGoal beePollinateGoal;
     Bee.BeeGoToHiveGoal goToHiveGoal;
     private Bee.BeeGoToKnownFlowerGoal goToKnownFlowerGoal;
@@ -490,7 +490,7 @@
         return this.getFlag(8);
     }
 
-    void setHasNectar(boolean flag) {
+    public void setHasNectar(boolean flag) { // Loom :: package-private -> public
         if (flag) {
             this.resetTicksWithoutNectarSinceExitingHive();
         }
@@ -502,7 +502,7 @@
         return this.getFlag(4);
     }
 
-    private void setHasStung(boolean flag) {
+    public void setHasStung(boolean flag) { // Loom :: private -> public
         this.setFlag(4, flag);
     }
 
@@ -635,9 +635,11 @@
         return blockpos.closerThan((Vec3i) this.blockPosition(), (double) i);
     }
 
+    /* // Loom start :: decompile error
     public AgeableMob getBreedOffspring(ServerLevel serverlevel, AgeableMob ageablemob) {
         return this.getBreedOffspring(serverlevel, ageablemob);
     }
+     */ // Loom end
 
     private class BeePollinateGoal extends Bee.BaseBeeGoal {
 
@@ -1251,7 +1253,7 @@
     private static class BeeBecomeAngryTargetGoal extends NearestAttackableTargetGoal<Player> {
 
         BeeBecomeAngryTargetGoal(Bee bee) {
-            Objects.requireNonNull(bee);
+            // Objects.requireNonNull(bee); // Loom :: decompile error
             super(bee, Player.class, 10, true, false, bee::isAngryAt);
         }
 
