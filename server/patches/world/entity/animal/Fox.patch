--- a/net/minecraft//world/entity/animal/Fox.java
+++ b/net/minecraft//world/entity/animal/Fox.java
@@ -347,11 +347,11 @@
         return Fox.Type.byId((Integer) this.entityData.get(Fox.DATA_TYPE_ID));
     }
 
-    private void setFoxType(Fox.Type fox_type) {
+    public void setFoxType(Fox.Type fox_type) { // Loom :: private -> public (FoxImpl)
         this.entityData.set(Fox.DATA_TYPE_ID, fox_type.getId());
     }
 
-    List<UUID> getTrustedUUIDs() {
+    public List<UUID> getTrustedUUIDs() { // Loom :: package-private -> public (FoxImpl)
         List<UUID> list = Lists.newArrayList();
 
         list.add((UUID) ((Optional) this.entityData.get(Fox.DATA_TRUSTED_ID_0)).orElse((Object) null));
@@ -359,7 +359,7 @@
         return list;
     }
 
-    void addTrustedUUID(@Nullable UUID uuid) {
+    public void addTrustedUUID(@Nullable UUID uuid) { // Loom :: package-private -> public (FoxImpl)
         if (((Optional) this.entityData.get(Fox.DATA_TRUSTED_ID_0)).isPresent()) {
             this.entityData.set(Fox.DATA_TRUSTED_ID_1, Optional.ofNullable(uuid));
         } else {
@@ -435,7 +435,7 @@
         return this.getFlag(32);
     }
 
-    void setSleeping(boolean flag) {
+    public void setSleeping(boolean flag) { // Loom :: package-private -> public
         this.setFlag(32, flag);
     }
 
@@ -697,9 +697,11 @@
         return new Vec3(0.0D, (double) (0.55F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
     }
 
+    /* // Loom start :: decompile error
     public AgeableMob getBreedOffspring(ServerLevel serverlevel, AgeableMob ageablemob) {
         return this.getBreedOffspring(serverlevel, ageablemob);
     }
+     */ // Loom end
 
     public class FoxLookControl extends LookControl {
 
@@ -1471,8 +1473,6 @@
             return livingentity instanceof Fox ? false : (!(livingentity instanceof Chicken) && !(livingentity instanceof Rabbit) && !(livingentity instanceof Monster) ? (livingentity instanceof TamableAnimal ? !((TamableAnimal) livingentity).isTame() : (livingentity instanceof Player && (livingentity.isSpectator() || ((Player) livingentity).isCreative()) ? false : (Fox.this.trusts(livingentity.getUUID()) ? false : !livingentity.isSleeping() && !livingentity.isDiscrete()))) : true);
         }
 
-        public boolean test(Object object) {
-            return this.test((LivingEntity) object);
-        }
+        // Loom :: decompile error
     }
 }
