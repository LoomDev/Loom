--- a/net/minecraft//world/level/chunk/LevelChunk.java
+++ b/net/minecraft//world/level/chunk/LevelChunk.java
@@ -64,6 +64,18 @@
 
 public class LevelChunk implements ChunkAccess {
 
+    // Loom start
+    @Nullable
+    private org.loomdev.loom.world.chunk.ChunkImpl chunkImpl;
+
+    public final org.loomdev.loom.world.chunk.ChunkImpl getLoomChunk() {
+        if (chunkImpl != null) {
+            return chunkImpl;
+        }
+
+        return chunkImpl = new org.loomdev.loom.world.chunk.ChunkImpl(this);
+    }
+    // Loom end
     static final Logger LOGGER = LogManager.getLogger();
     private static final TickingBlockEntity NULL_TICKER = new TickingBlockEntity() {
         public void tick() {}
@@ -755,7 +767,7 @@
     public void unpackTicks() {
         if (this.blockTicks instanceof ProtoTickList) {
             ((ProtoTickList) this.blockTicks).copyOut(this.level.getBlockTicks(), (blockpos) -> {
-                return this.getBlockState(blockpos).getBlock();
+                return this.getBlockState((BlockPos) blockpos).getBlock(); // Loom :: decompile error
             });
             this.blockTicks = EmptyTickList.empty();
         } else if (this.blockTicks instanceof ChunkTickList) {
@@ -765,7 +777,7 @@
 
         if (this.liquidTicks instanceof ProtoTickList) {
             ((ProtoTickList) this.liquidTicks).copyOut(this.level.getLiquidTicks(), (blockpos) -> {
-                return this.getFluidState(blockpos).getType();
+                return this.getFluidState((BlockPos) blockpos).getType(); // Loom :: decompile error
             });
             this.liquidTicks = EmptyTickList.empty();
         } else if (this.liquidTicks instanceof ChunkTickList) {
@@ -776,19 +788,21 @@
     }
 
     public void packTicks(ServerLevel serverlevel) {
-        DefaultedRegistry defaultedregistry;
+        // Loom start :: decompile error
+        // DefaultedRegistry defaultedregistry;
 
-        if (this.blockTicks == EmptyTickList.empty()) {
-            defaultedregistry = Registry.BLOCK;
-            Objects.requireNonNull(defaultedregistry);
-            this.blockTicks = new ChunkTickList<>(defaultedregistry::getKey, serverlevel.getBlockTicks().fetchTicksInChunk(this.chunkPos, true, false), serverlevel.getGameTime());
+        if (this.blockTicks == EmptyTickList.<Block>empty()) { // Loom :: decompile error
+            // defaultedregistry = Registry.BLOCK;
+            // Objects.requireNonNull(defaultedregistry);
+            this.blockTicks = new ChunkTickList<>(Registry.BLOCK::getKey, serverlevel.getBlockTicks().fetchTicksInChunk(this.chunkPos, true, false), serverlevel.getGameTime());
             this.setUnsaved(true);
         }
 
-        if (this.liquidTicks == EmptyTickList.empty()) {
-            defaultedregistry = Registry.FLUID;
-            Objects.requireNonNull(defaultedregistry);
-            this.liquidTicks = new ChunkTickList<>(defaultedregistry::getKey, serverlevel.getLiquidTicks().fetchTicksInChunk(this.chunkPos, true, false), serverlevel.getGameTime());
+        if (this.liquidTicks == EmptyTickList.<Fluid>empty()) {
+            // defaultedregistry = Registry.FLUID;
+            // Objects.requireNonNull(defaultedregistry);
+            this.liquidTicks = new ChunkTickList<>(Registry.FLUID::getKey, serverlevel.getLiquidTicks().fetchTicksInChunk(this.chunkPos, true, false), serverlevel.getGameTime());
+            // Loom end
             this.setUnsaved(true);
         }
 
@@ -853,7 +867,7 @@
 
     private <T extends BlockEntity> void updateBlockEntityTicker(T t0) {
         BlockState blockstate = t0.getBlockState();
-        BlockEntityTicker<T> blockentityticker = blockstate.getTicker(this.level, t0.getType());
+        BlockEntityTicker<T> blockentityticker = (BlockEntityTicker<T>) blockstate.getTicker(this.level, t0.getType()); // Loom :: decompile error
 
         if (blockentityticker == null) {
             this.removeBlockEntityTicker(t0.getBlockPos());
