--- a/net/minecraft/entity/mob/HoglinEntity.java
+++ b/net/minecraft/entity/mob/HoglinEntity.java
@@ -45,12 +45,13 @@
 
 public class HoglinEntity extends AnimalEntity implements Monster, Hoglin {
 
+    public static final int CONVERSION_TIME = 300; // Loom :: extracted hardcoded value that is referenced in Loom code. (HoglinImp.java)
     private static final TrackedData<Boolean> BABY = DataTracker.registerData(HoglinEntity.class, TrackedDataHandlerRegistry.BOOLEAN);
     private int movementCooldownTicks;
-    private int timeInOverworld;
+    public int timeInOverworld; // Loom :: public accessor
     private boolean cannotBeHunted;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super HoglinEntity>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ADULT, SensorType.HOGLIN_SPECIFIC_SENSOR);
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_MODULE_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.MOBS, MemoryModuleType.VISIBLE_MOBS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, new MemoryModuleType[]{MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED});
+    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_MODULE_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.MOBS, MemoryModuleType.VISIBLE_MOBS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLIN, MemoryModuleType.AVOID_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_ADULT_HOGLINS, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.NEAREST_REPELLENT, MemoryModuleType.PACIFIED); // Loom :: decompile error
 
     public HoglinEntity(EntityType<? extends HoglinEntity> entitytype, World world) {
         super(entitytype, world);
@@ -107,7 +108,7 @@
     }
 
     public Brain<HoglinEntity> getBrain() {
-        return super.getBrain();
+        return (Brain<HoglinEntity>) super.getBrain(); // Loom :: decompile error
     }
 
     protected void mobTick() {
@@ -117,7 +118,7 @@
         HoglinBrain.refreshActivities(this);
         if (this.canConvert()) {
             ++this.timeInOverworld;
-            if (this.timeInOverworld > 300) {
+            if (this.timeInOverworld > CONVERSION_TIME) { // Loom :: extracted hardcoded value that is referenced in Loom code. (HoglinImp.java)
                 this.method_30081(SoundEvents.ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED);
                 this.zombify((ServerWorld) this.world);
             }
@@ -189,7 +190,7 @@
         return this.experiencePoints;
     }
 
-    private void zombify(ServerWorld serverworld) {
+    public void zombify(ServerWorld serverworld) { // Loom :: public accessor
         ZoglinEntity zoglinentity = (ZoglinEntity) this.method_29243(EntityType.ZOGLIN, true);
 
         if (zoglinentity != null) {
@@ -235,7 +236,7 @@
         this.getDataTracker().set(HoglinEntity.BABY, flag);
     }
 
-    private boolean isImmuneToZombification() {
+    public boolean isImmuneToZombification() { // Loom :: public accessor
         return (Boolean) this.getDataTracker().get(HoglinEntity.BABY);
     }
 
@@ -243,7 +244,7 @@
         return !this.world.getDimension().isPiglinSafe() && !this.isImmuneToZombification() && !this.isAiDisabled();
     }
 
-    private void setCannotBeHunted(boolean flag) {
+    public void setCannotBeHunted(boolean flag) { // Loom :: public accessor
         this.cannotBeHunted = flag;
     }
 
@@ -271,7 +272,7 @@
     }
 
     protected SoundEvent getAmbientSound() {
-        return this.world.isClient ? null : (SoundEvent) HoglinBrain.method_30083(this).orElse((Object) null);
+        return this.world.isClient ? null : (SoundEvent) HoglinBrain.method_30083(this).orElse(null); // Loom :: decompile error
     }
 
     protected SoundEvent getHurtSound(DamageSource damagesource) {
@@ -294,7 +295,7 @@
         this.playSound(SoundEvents.ENTITY_HOGLIN_STEP, 0.15F, 1.0F);
     }
 
-    protected void method_30081(SoundEvent soundevent) {
+    public void method_30081(SoundEvent soundevent) { // Loom :: public accessor
         this.playSound(soundevent, this.getSoundVolume(), this.getSoundPitch());
     }
 
