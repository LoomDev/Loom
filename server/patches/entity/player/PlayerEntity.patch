--- a/net/minecraft/entity/player/PlayerEntity.java
+++ b/net/minecraft/entity/player/PlayerEntity.java
@@ -110,7 +110,7 @@
 public abstract class PlayerEntity extends LivingEntity {
 
     public static final EntityDimensions STANDING_DIMENSIONS = EntityDimensions.changing(0.6F, 1.8F);
-    private static final Map<EntityPose, EntityDimensions> POSE_DIMENSIONS = ImmutableMap.builder().put(EntityPose.STANDING, PlayerEntity.STANDING_DIMENSIONS).put(EntityPose.SLEEPING, PlayerEntity.SLEEPING_DIMENSIONS).put(EntityPose.FALL_FLYING, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SWIMMING, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SPIN_ATTACK, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.CROUCHING, EntityDimensions.changing(0.6F, 1.5F)).put(EntityPose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
+    private static final Map<EntityPose, EntityDimensions> POSE_DIMENSIONS = ImmutableMap.<EntityPose, EntityDimensions>builder().put(EntityPose.STANDING, PlayerEntity.STANDING_DIMENSIONS).put(EntityPose.SLEEPING, PlayerEntity.SLEEPING_DIMENSIONS).put(EntityPose.FALL_FLYING, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SWIMMING, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SPIN_ATTACK, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.CROUCHING, EntityDimensions.changing(0.6F, 1.5F)).put(EntityPose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build(); // Loom :: decompile error
     private static final TrackedData<Float> ABSORPTION_AMOUNT = DataTracker.registerData(PlayerEntity.class, TrackedDataHandlerRegistry.FLOAT);
     private static final TrackedData<Integer> SCORE = DataTracker.registerData(PlayerEntity.class, TrackedDataHandlerRegistry.INTEGER);
     protected static final TrackedData<Byte> PLAYER_MODEL_PARTS = DataTracker.registerData(PlayerEntity.class, TrackedDataHandlerRegistry.BYTE);
@@ -135,7 +135,7 @@
     public double capeZ;
     private int sleepTimer;
     protected boolean isSubmergedInWater;
-    private final PlayerAbilities abilities = new PlayerAbilities();
+    public final PlayerAbilities abilities = new PlayerAbilities(); // Loom :: public accessor
     public int experienceLevel;
     public int totalExperience;
     public float experienceProgress;
@@ -1441,6 +1441,11 @@
             ItemStack itemstack = this.getEquippedStack(EquipmentSlot.CHEST);
 
             if (itemstack.method_31574(Items.ELYTRA) && ElytraItem.isUsable(itemstack)) {
+                // Loom start :: fire PlayerEnteredFlightEvent
+                if (org.loomdev.loom.event.LoomEventDispatcher.onPlayerEnteredFlight(this).isCancelled()) {
+                    return false;
+                }
+                // Loom end
                 this.startFallFlying();
                 return true;
             }
